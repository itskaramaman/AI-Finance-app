// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  clerkUserId String @unique

  imageUrl String?
  name String?

  accounts Account[]
  budgets Budget[]
  transactions Transaction[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users") 
}

model Account {
  id String @id @default(uuid())
  name String
  type AccountType
  balance Decimal @default(0)
  isDefault Boolean @default(false)
  
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  @@index([userId])
  @@map("account")
}

enum AccountType {
  SAVINGS
  CURRENT
}

model Budget {
  id String @id @default(uuid())
  amount Decimal

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  lastAlertSent DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Transaction {
  id String @id @default(uuid())
  type TransactionType
  amount Decimal
  description String?
  date DateTime
  
  category String
  receiptUrl String?
  
  isRecurring Boolean @default(false)
  recurringInterval RecurringInterval?
  nextRecurringDate DateTime?
  lastProcessed DateTime?
  status TransactionStatus @default(COMPLETED)

  userId String
  user User @relation(fields: [userId], references: [id])

  accountId String
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}